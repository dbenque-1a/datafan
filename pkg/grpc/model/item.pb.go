// Code generated by protoc-gen-go. DO NOT EDIT.
// source: item.proto

/*
Package model is a generated protocol buffer package.

It is generated from these files:
	item.proto

It has these top-level messages:
	Item
	Items
	KeyIDPair
	KeyIDPairs
	StampedKey
	Index
	IndexMap
*/
package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Item struct {
	Data      []byte                     `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Key       string                     `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Owner     string                     `protobuf:"bytes,4,opt,name=owner" json:"owner,omitempty"`
}

func (m *Item) Reset()                    { *m = Item{} }
func (m *Item) String() string            { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()               {}
func (*Item) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Item) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Item) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Item) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Item) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type Items struct {
	Items []*Item `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *Items) Reset()                    { *m = Items{} }
func (m *Items) String() string            { return proto.CompactTextString(m) }
func (*Items) ProtoMessage()               {}
func (*Items) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Items) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

type KeyIDPair struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Id  string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *KeyIDPair) Reset()                    { *m = KeyIDPair{} }
func (m *KeyIDPair) String() string            { return proto.CompactTextString(m) }
func (*KeyIDPair) ProtoMessage()               {}
func (*KeyIDPair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *KeyIDPair) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyIDPair) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type KeyIDPairs struct {
	KeyIDPairs []*KeyIDPair `protobuf:"bytes,1,rep,name=keyIDPairs" json:"keyIDPairs,omitempty"`
}

func (m *KeyIDPairs) Reset()                    { *m = KeyIDPairs{} }
func (m *KeyIDPairs) String() string            { return proto.CompactTextString(m) }
func (*KeyIDPairs) ProtoMessage()               {}
func (*KeyIDPairs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *KeyIDPairs) GetKeyIDPairs() []*KeyIDPair {
	if m != nil {
		return m.KeyIDPairs
	}
	return nil
}

type StampedKey struct {
	Key       string                     `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *StampedKey) Reset()                    { *m = StampedKey{} }
func (m *StampedKey) String() string            { return proto.CompactTextString(m) }
func (*StampedKey) ProtoMessage()               {}
func (*StampedKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *StampedKey) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *StampedKey) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type Index struct {
	BuildTime    *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=buildTime" json:"buildTime,omitempty"`
	StamptedKeys []*StampedKey              `protobuf:"bytes,2,rep,name=stamptedKeys" json:"stamptedKeys,omitempty"`
}

func (m *Index) Reset()                    { *m = Index{} }
func (m *Index) String() string            { return proto.CompactTextString(m) }
func (*Index) ProtoMessage()               {}
func (*Index) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Index) GetBuildTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.BuildTime
	}
	return nil
}

func (m *Index) GetStamptedKeys() []*StampedKey {
	if m != nil {
		return m.StamptedKeys
	}
	return nil
}

type IndexMap struct {
	Source  string            `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Indexes map[string]*Index `protobuf:"bytes,2,rep,name=indexes" json:"indexes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *IndexMap) Reset()                    { *m = IndexMap{} }
func (m *IndexMap) String() string            { return proto.CompactTextString(m) }
func (*IndexMap) ProtoMessage()               {}
func (*IndexMap) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *IndexMap) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *IndexMap) GetIndexes() map[string]*Index {
	if m != nil {
		return m.Indexes
	}
	return nil
}

func init() {
	proto.RegisterType((*Item)(nil), "model.Item")
	proto.RegisterType((*Items)(nil), "model.Items")
	proto.RegisterType((*KeyIDPair)(nil), "model.KeyIDPair")
	proto.RegisterType((*KeyIDPairs)(nil), "model.KeyIDPairs")
	proto.RegisterType((*StampedKey)(nil), "model.StampedKey")
	proto.RegisterType((*Index)(nil), "model.Index")
	proto.RegisterType((*IndexMap)(nil), "model.IndexMap")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IndexMapCollector service

type IndexMapCollectorClient interface {
	CollectIndexMap(ctx context.Context, in *IndexMap, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type indexMapCollectorClient struct {
	cc *grpc.ClientConn
}

func NewIndexMapCollectorClient(cc *grpc.ClientConn) IndexMapCollectorClient {
	return &indexMapCollectorClient{cc}
}

func (c *indexMapCollectorClient) CollectIndexMap(ctx context.Context, in *IndexMap, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/model.IndexMapCollector/CollectIndexMap", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IndexMapCollector service

type IndexMapCollectorServer interface {
	CollectIndexMap(context.Context, *IndexMap) (*google_protobuf1.Empty, error)
}

func RegisterIndexMapCollectorServer(s *grpc.Server, srv IndexMapCollectorServer) {
	s.RegisterService(&_IndexMapCollector_serviceDesc, srv)
}

func _IndexMapCollector_CollectIndexMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexMapCollectorServer).CollectIndexMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.IndexMapCollector/CollectIndexMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexMapCollectorServer).CollectIndexMap(ctx, req.(*IndexMap))
	}
	return interceptor(ctx, in, info, handler)
}

var _IndexMapCollector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model.IndexMapCollector",
	HandlerType: (*IndexMapCollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CollectIndexMap",
			Handler:    _IndexMapCollector_CollectIndexMap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "item.proto",
}

// Client API for DataRequest service

type DataRequestClient interface {
	GetData(ctx context.Context, in *KeyIDPairs, opts ...grpc.CallOption) (*Items, error)
}

type dataRequestClient struct {
	cc *grpc.ClientConn
}

func NewDataRequestClient(cc *grpc.ClientConn) DataRequestClient {
	return &dataRequestClient{cc}
}

func (c *dataRequestClient) GetData(ctx context.Context, in *KeyIDPairs, opts ...grpc.CallOption) (*Items, error) {
	out := new(Items)
	err := grpc.Invoke(ctx, "/model.DataRequest/GetData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DataRequest service

type DataRequestServer interface {
	GetData(context.Context, *KeyIDPairs) (*Items, error)
}

func RegisterDataRequestServer(s *grpc.Server, srv DataRequestServer) {
	s.RegisterService(&_DataRequest_serviceDesc, srv)
}

func _DataRequest_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyIDPairs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataRequestServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.DataRequest/GetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataRequestServer).GetData(ctx, req.(*KeyIDPairs))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataRequest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model.DataRequest",
	HandlerType: (*DataRequestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetData",
			Handler:    _DataRequest_GetData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "item.proto",
}

func init() { proto.RegisterFile("item.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 440 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x6b, 0xd4, 0x40,
	0x14, 0xc6, 0x99, 0xec, 0xa6, 0x75, 0xdf, 0x06, 0xdb, 0x1d, 0xa4, 0x84, 0x28, 0xb8, 0xce, 0x69,
	0x29, 0x98, 0x4a, 0x44, 0xa9, 0x3d, 0x78, 0xb1, 0x45, 0x97, 0x22, 0xca, 0xe8, 0xc1, 0xeb, 0x6c,
	0xf3, 0x2c, 0xa1, 0xc9, 0x4e, 0xcc, 0x4c, 0xb4, 0x01, 0xff, 0x1c, 0xff, 0x50, 0x99, 0xc9, 0x24,
	0x9b, 0xae, 0x0b, 0xd2, 0xdb, 0xbc, 0x79, 0xbf, 0x7c, 0xef, 0xfb, 0x5e, 0x06, 0x20, 0xd3, 0x58,
	0xc4, 0x65, 0x25, 0xb5, 0xa4, 0x7e, 0x21, 0x53, 0xcc, 0xa3, 0xa7, 0xd7, 0x52, 0x5e, 0xe7, 0x78,
	0x62, 0x2f, 0x57, 0xf5, 0xf7, 0x13, 0x9d, 0x15, 0xa8, 0xb4, 0x28, 0xca, 0x96, 0x8b, 0x1e, 0x6f,
	0x03, 0x58, 0x94, 0xba, 0x69, 0x9b, 0xec, 0x37, 0x8c, 0x97, 0x1a, 0x0b, 0x4a, 0x61, 0x9c, 0x0a,
	0x2d, 0x42, 0x32, 0x27, 0x8b, 0x80, 0xdb, 0x33, 0x3d, 0x84, 0xd1, 0x0d, 0x36, 0xa1, 0x37, 0x27,
	0x8b, 0x09, 0x37, 0x47, 0x7a, 0x0a, 0x93, 0x5e, 0x3d, 0x1c, 0xcd, 0xc9, 0x62, 0x9a, 0x44, 0x71,
	0x2b, 0x1f, 0x77, 0xf2, 0xf1, 0xd7, 0x8e, 0xe0, 0x1b, 0x98, 0x3e, 0x02, 0x5f, 0xfe, 0x5a, 0x63,
	0x15, 0x8e, 0xad, 0x5a, 0x5b, 0xb0, 0x63, 0xf0, 0xcd, 0x74, 0x45, 0x9f, 0x81, 0x6f, 0x92, 0xa9,
	0x90, 0xcc, 0x47, 0x8b, 0x69, 0x32, 0x8d, 0x6d, 0xb6, 0xd8, 0x34, 0x79, 0xdb, 0x61, 0xcf, 0x61,
	0x72, 0x89, 0xcd, 0xf2, 0xfc, 0xb3, 0xc8, 0xaa, 0xce, 0x1a, 0xd9, 0x58, 0x7b, 0x08, 0x5e, 0x96,
	0x3a, 0xaf, 0x5e, 0x96, 0xb2, 0xb7, 0x00, 0x3d, 0xae, 0xe8, 0x0b, 0x80, 0x9b, 0xbe, 0x72, 0x43,
	0x0e, 0xdd, 0x90, 0x1e, 0xe3, 0x03, 0x86, 0x7d, 0x03, 0xf8, 0x62, 0x9c, 0x63, 0x7a, 0x89, 0xcd,
	0x8e, 0x79, 0x77, 0x56, 0xe1, 0xdd, 0x63, 0x15, 0xec, 0x16, 0xfc, 0xe5, 0x3a, 0xc5, 0x5b, 0x23,
	0xb1, 0xaa, 0xb3, 0x3c, 0x35, 0x94, 0x95, 0xfe, 0x8f, 0x44, 0x0f, 0xd3, 0x57, 0x10, 0xd8, 0x3b,
	0x6d, 0xdd, 0xa9, 0xd0, 0xb3, 0x81, 0x66, 0x2e, 0xd0, 0xc6, 0x37, 0xbf, 0x83, 0xb1, 0x3f, 0x04,
	0x1e, 0xd8, 0xd1, 0x1f, 0x45, 0x49, 0x8f, 0x60, 0x4f, 0xc9, 0xba, 0xba, 0x42, 0x97, 0xca, 0x55,
	0xf4, 0x35, 0xec, 0x67, 0x86, 0xc1, 0x4e, 0xf6, 0x49, 0xf7, 0x33, 0xdc, 0x97, 0xed, 0x01, 0xd5,
	0xc5, 0x5a, 0x57, 0x0d, 0xef, 0xe0, 0xe8, 0x03, 0x04, 0xc3, 0xc6, 0x8e, 0x95, 0x31, 0xf0, 0x7f,
	0x8a, 0xbc, 0x46, 0xb7, 0xae, 0x60, 0xa8, 0xcb, 0xdb, 0xd6, 0x99, 0x77, 0x4a, 0x92, 0x4f, 0x30,
	0xeb, 0x66, 0xbd, 0x93, 0x79, 0x8e, 0x57, 0x5a, 0x56, 0xf4, 0x0c, 0x0e, 0x5c, 0xd1, 0x27, 0x38,
	0xd8, 0x32, 0x16, 0x1d, 0xfd, 0xb3, 0xbd, 0x0b, 0xf3, 0xd4, 0x93, 0x37, 0x30, 0x3d, 0x17, 0x5a,
	0x70, 0xfc, 0x51, 0xa3, 0xd2, 0xf4, 0x18, 0xf6, 0xdf, 0xa3, 0x36, 0x37, 0x74, 0xb6, 0xfd, 0x06,
	0x54, 0x14, 0x0c, 0xde, 0x9e, 0x5a, 0xed, 0x59, 0xa9, 0x97, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x9e, 0xc4, 0xf6, 0xad, 0x79, 0x03, 0x00, 0x00,
}
